///практика
export default function FilmsView() {
const [page,setPage ]= useState(1)
const [movies,setMovies]=  
  useState([])
const [img,setImg]=  
  useState('')
const [isLoading,setIsLoading]=    
  useState(false)

  useEffect(() => {
  

        setIsLoading(true);
        api.getFilms(page)
            .then(({ data }) => {
                setMovies(prevState => [...prevState, ...filterMovies(data.results)]);
            })
            .catch(error => console.log(error))
            .finally(() => {
                setIsLoading(false);
                if (page > 1) {
                    window.scrollTo({
                        top: document.documentElement.scrollHeight,
                        behavior: 'smooth',
                    });
                }
            });
    }, [page]);
/*
  const getFilms = page => {
    setIsLoading(true);
    api.getFilms(page).then(
      ({ data }) => {
         setMovies(prevState => [...prevState, ...filterMovies(data.results)]);
        })
      .catch(error => console.log(error))
      .finally(() => setIsLoading(false));
     };
*/
  const handleClick = () => {
   
    setPage( prevPage => prevPage + 1 );
  
    //this.setState((prev) => ({ page: prev.page + 1 }))
  };

  

  const handleItemClick = img => setImg( img );

  const handleCloseOverlay = () =>  setImg('');
  
  const handleChangeStatus = id => {

    const newMovies = [];

    for (const movie of movies) {
      if (movie.id === id) {
        movie.isWatched = !movie.isWatched;
        newMovies.push(movie);
      }
    else
      {
        newMovies.push(movie);
      }
    };
    setMovies(newMovies);
  };
 

    return (
      <>
        <Container>
          { movies.length >0 &&
          <><FilmsList
            movies={movies}
            onClick={handleItemClick}
            onStatusClick={handleChangeStatus}
          />
            <Button onClick={handleClick}/>
          </>
          }
        </Container>
        {isLoading && <Loader/> }
        {img && <Overlay img={img} onClick={handleCloseOverlay} />}
      </>);

}
  
// дз4
function App() {
  const [searchQuery, setSearchQuery] =
    useState('');
  const [page, setPage] = useState(1);
  const [images, setImages] = useState(
    [],
  );
  const [
    largeImageUrl,
    setLargeImageUrl,
  ] = useState('');
  const [error, setError] =
    useState(null);
  const [showModal, setShowModal] =
    useState(false);
  const [isLoading, setIsLoading] =
    useState(false);

  useEffect(() => {
    function fetchImages() {
      setIsLoading(true);
      fetchApi(searchQuery, page)
        .then(data =>
          data.length > 0
            ? setImages(prevState => [
                ...prevState,
                ...filterImages(data),
              ])
            : toast.warning(
                'Image not found!!!',
              ),
        )
        .catch(
          error => console.log(error),
          //setError(error)
        )
        .finally(() => {
          setIsLoading(false);

          window.scrollTo({
            top: document
              .documentElement
              .scrollHeight,
            behavior: 'smooth',
          });
        });
    }
    if (searchQuery) {
      fetchImages();
    }
  }, [searchQuery, page]);

  function toggleModal(largeImageUrl) {
    setLargeImageUrl(largeImageUrl);
    setShowModal(!showModal);
  }

  function handleSubmit(searchQuery) {
    setImages([]);
    setSearchQuery(searchQuery);
    setPage(1);
    setError(null);
  }

  function handleLoadMore() {
    setPage(prev => prev + 1);
  }

  return (
    <div className="App">
      {error &&
        toast.error(
          'Error!!! Something went wrong.',
        )}

      <Searchbar
        onSubmit={handleSubmit}
      />

      {isLoading && <Loader />}

      {images.length > 0 && (
        <ImageGallery
          images={images}
          onClose={toggleModal}
        />
      )}

      {images.length > 11 && (
        <Button
          type="button"
          onClick={handleLoadMore}
        />
      )}

      {showModal && (
        <Modal
          onClose={toggleModal}
          largeImageUrl={largeImageUrl}
        />
      )}
      <ToastContainer
        position="top-center"
        autoClose={5000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
      />
    </div>
  );
}
